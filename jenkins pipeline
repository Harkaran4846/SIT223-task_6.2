pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Stage 1: Build - Building the code'
                git branch: 'main', url: ''
                echo 'Installing dependencies...'
                echo 'Building the React application...'
                echo 'Hello'
            }
        }

         stage('Unit and Integration Tests') {
            steps {
                echo 'Stage 2: Running unit and integration tests using JUnit and Selenium'
                echo 'This stage would run unit tests using JUnit and integration tests using Selenium.'
            }
        }

        stage('Code Analysis') {
            steps {
                echo 'Stage 3: Analyzing code using SonarQube'
                echo 'This stage would analyze the code using SonarQube to ensure it meets industry standards.'
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Stage 4: Performing security scan using OWASP ZAP'
                echo 'This stage would perform a security scan using OWASP ZAP to identify vulnerabilities.'
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'Stage 5: Deploying application to AWS EC2 staging server'
                echo 'This stage would deploy the application to an AWS EC2 staging server.'
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo 'Stage 6: Running integration tests on staging environment'
                echo 'This stage would run integration tests on the staging environment to ensure the application functions as expected.'
            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'Stage 7: Deploying application to AWS EC2 production server'
                echo 'This stage would deploy the application to an AWS EC2 production server.'
            }
        }
    }

    post {
        success {
            script {
                def powershellCommand = '''
                $SMTPServer = "smtp.gmail.com"
                $SMTPPort = 587
                $SMTPFrom = "harkaran687@gmail.com"
                $SMTPTo = "harkaran687@gmail.com"
                $SMTPSubject = "Jenkins pipeline executed successfully!"
                $SMTPBody = "The pipeline has been executed successfully."
                $SMTPUsername = "harkaran687@gmail.com"
                $SMTPPassword = "yuhourdgsxgyqeik"  
                $SMTPEnableSSL = $true

                $SMTPClient = New-Object Net.Mail.SmtpClient($SMTPServer, $SMTPPort)
                $SMTPClient.EnableSsl = $SMTPEnableSSL
                $SMTPClient.Credentials = New-Object System.Net.NetworkCredential($SMTPUsername, $SMTPPassword)
                $SMTPClient.Send($SMTPFrom, $SMTPTo, $SMTPSubject, $SMTPBody)
                '''
                powershell(powershellCommand)
            }
            echo "GREAT SUCCESS!"
        }

        failure {
            script {
                def powershellCommand = '''
                $SMTPServer = "smtp.gmail.com"
                $SMTPPort = 587
                $SMTPFrom = "harkaran687@gmail.com"
                $SMTPTo = "harkaran687@gmail.com"
                $SMTPSubject = "FAILURE"
                $SMTPBody = "Pipeline failed to execute, errors occurred"
                $SMTPUsername = "harkaran687@gmail.com"
                $SMTPPassword = "yuhourdgsxgyqeik" 
                $SMTPEnableSSL = $true

                $SMTPClient = New-Object Net.Mail.SmtpClient($SMTPServer, $SMTPPort)
                $SMTPClient.EnableSsl = $SMTPEnableSSL
                $SMTPClient.Credentials = New-Object System.Net.NetworkCredential($SMTPUsername, $SMTPPassword)
                $SMTPClient.Send($SMTPFrom, $SMTPTo, $SMTPSubject, $SMTPBody)
                '''
                powershell(powershellCommand)
            }
            echo "Pipeline Execution Failed!"
        }
    }
}
